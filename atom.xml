<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://BTli-Frozen.github.io</id>
    <title>BT狸的个人博客</title>
    <updated>2020-10-18T06:54:05.209Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://BTli-Frozen.github.io"/>
    <link rel="self" href="https://BTli-Frozen.github.io/atom.xml"/>
    <logo>https://BTli-Frozen.github.io/images/avatar.png</logo>
    <icon>https://BTli-Frozen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, BT狸的个人博客</rights>
    <entry>
        <title type="html"><![CDATA[素数的判断]]></title>
        <id>https://BTli-Frozen.github.io/post/su-shu-de-pan-duan/</id>
        <link href="https://BTli-Frozen.github.io/post/su-shu-de-pan-duan/">
        </link>
        <updated>2020-10-18T06:07:42.000Z</updated>
        <content type="html"><![CDATA[<h1 id="素数的常用判断">素数的常用判断</h1>
<hr>
<h2 id="0-超级普通法">0. 超级普通法</h2>
<p>只是利用了素数的定义<br>
时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p>
<pre><code class="language-cpp">bool Prime0(int x)
{
    if(x==1) return 0;//排除特殊
    if(x==2||x==3) return 1;
    for(int i=2,i&lt;=x;i++)
      if(x%i==0) return 0;//不是
    return 1;             //是
}
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="brown"><mtext>弊端：这个就不用说了吧</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{brown}\text{弊端：这个就不用说了吧}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:brown;"><span class="mord cjk_fallback" style="color:brown;">弊端：这个就不用说了吧</span></span></span></span></span></p>
<h2 id="1-标准常用法">1. 标准常用法</h2>
<p>针对基础解法只是将单个时间复杂度降为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mtext> ⁣</mtext><msqrt><mi>N</mi></msqrt><mtext> ⁣</mtext><mo>)</mo><mtext> ⁣</mtext></mrow><annotation encoding="application/x-tex">O(\!\sqrt{N}\!)\!</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.176665em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9266650000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.886665em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.11333499999999996em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mclose">)</span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span></span></span></span>（即去除了一部分重复的不必要的东西）</p>
<pre><code class="language-cpp">bool Prime1(int x)   //由于时间复杂度太高 ，只判断单个数
{
    if(x==1) return 0;
 	for(int i=2;i&lt;=sqrt(x);i++)
 	   if(x%i==0) return 0;//不是质数
	return 1;              //是质数 
}
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="brown"><mtext>弊端:同上</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{brown}\text{弊端:同上}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:brown;"><span class="mord cjk_fallback" style="color:brown;">弊端</span><span class="mord" style="color:brown;">:</span><span class="mord cjk_fallback" style="color:brown;">同上</span></span></span></span></span></p>
<h2 id="2-爱拉托斯特尼筛法">2. 爱拉托斯特尼筛法</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mtext>原理：素数的倍数一定不是素数</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\text{原理：素数的倍数一定不是素数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:red;"><span class="mord cjk_fallback" style="color:red;">原理：素数的倍数一定不是素数</span></span></span></span></span></p>
<p>时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><msubsup><mrow><mi>l</mi><mi>o</mi><mi>g</mi></mrow><mn>2</mn><mn>2</mn></msubsup><mtext> ⁣</mtext><mi>N</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>N</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>N</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mtext> ⁣</mtext><msub><mo>∑</mo><mrow><mi>p</mi><mo>&lt;</mo><mi>n</mi></mrow></msub><mtext> ⁣</mtext><mfrac><mi>n</mi><mi>p</mi></mfrac><mtext> ⁣</mtext><mo>)</mo></mrow><annotation encoding="application/x-tex">O(N{log}^2_2\!N)=O(NloglogN)=O(\!\sum_{p&lt;n}\!\frac{n}{p}\!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.148448em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8984479999999999em;"><span style="top:-2.4530000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.1473400000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2311079999999999em;vertical-align:-0.481108em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.07765999999999995em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span><span class="mrel mtight">&lt;</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mclose">)</span></span></span></span></p>
<pre><code class="language-cpp">int prime[mx];
void Prime2()    //时间复杂度 O(n*lglgn)
{
	for (int i=0;i&lt;mx;i++) prime[i]=1;//初始化，全体为合数
	prime[0]=prime[1]=0;//排除特殊
	for (int i=2;i&lt;mx;i++)
	{
		if(!prime[i]) continue;
		for (int j=i*2,j&lt;mx;j+=i) prime[j]=0;//将i倍数标记为合数 
	 } 
 } 
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="brown"><mtext>弊端：一个数会被筛很多次</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{brown}\text{弊端：一个数会被筛很多次}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:brown;"><span class="mord cjk_fallback" style="color:brown;">弊端：一个数会被筛很多次</span></span></span></span></span></p>
<h2 id="3-线性筛法欧拉筛">3. 线性筛法(欧拉筛）</h2>
<p><s>有点复杂</s><br>
<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mtext>原理：一个合数只会被他最小的质数因子筛去一次</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\text{原理：一个合数只会被他最小的质数因子筛去一次}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:red;"><span class="mord cjk_fallback" style="color:red;">原理：一个合数只会被他最小的质数因子筛去一次</span></span></span></span></span><br>
时间复杂度约为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span>(抵消后）</p>
<pre><code class="language-cpp">int vis[mx]，prime[mx];
void prime3()     //复杂度 O(n) 
{
	int cnt=0;
    vis[1]=1;     //排除特殊情况1
	for(int i=2;i&lt;=n;i++)
	{
		if(!vis[i]) prime[cnt++]=i;
		for (int j=0;j&lt;cnt&amp;&amp;i*prime[j]&lt;=n;j++)
		{
			vis[i*prime[j]]=1;     //倍数去除
			if(i%prime[j]==0) break;   //去重
		} 
	}
 } 
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="brown"><mtext>弊端：为了判断一个大数是否是素数必须从从头开始扫描，而且空间代价也受不了，故不能离散的判断</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{brown}\text{弊端：为了判断一个大数是否是素数必须从从头开始扫描，而且空间代价也受不了，故不能离散的判断}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:brown;"><span class="mord cjk_fallback" style="color:brown;">弊端：为了判断一个大数是否是素数必须从从头开始扫描，而且空间代价也受不了，故不能离散的判断</span></span></span></span></span></p>
<h2 id="4-其它">4. 其它</h2>
<p>证明：令x≥1，将大于等于5的自然数表示如下：······ 6x-1，6x，6x+1，6x+2，6x+3，6x+4，6x+5，6(x+1），6(x+1)+1 ······<br>
则可以得到，不在6的倍数两侧，即不在6x两侧的数为6x+2，6x+3，6x+4，等于2(3x+1)，3(2x+1)，2(3x+2)，包括6x本身，它们一定不是素数</p>
<p>由此我们可以得到：素数要出现只可能出现在6x的相邻两侧。</p>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mtext>注意：在6的倍数相邻两侧并不是一定就是质数</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\text{注意：在6的倍数相邻两侧并不是一定就是质数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:red;"><span class="mord cjk_fallback" style="color:red;">注意：在</span><span class="mord" style="color:red;">6</span><span class="mord cjk_fallback" style="color:red;">的倍数相邻两侧并不是一定就是质数</span></span></span></span></span>**。</p>
<p>此时判断质数可以6个为单元快进，即将方法1循环中i++步长加大为6，加快判断速度。循环中只需要考虑6i-1和6i+1的情况，即循环的步长可以定为6，每次判断循环变量k和k+2的情况即可，理论上讲整体速度应该会是方法1的3倍。（从<a href="https://blog.csdn.net/huang_miao_xin/article/details/51331710">这篇文章</a>转载）</p>
<p>时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mtext> ⁣</mtext><mfrac><msqrt><mi>N</mi></msqrt><mn>3</mn></mfrac><mtext> ⁣</mtext><mo>)</mo></mrow><annotation encoding="application/x-tex">O(\!\frac{\sqrt{N}}{3}\!)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.391603em;vertical-align:-0.345em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.046603em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord sqrt mtight"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322900000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight" style="padding-left:0.833em;"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.89229em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail mtight" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,
-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,
-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,
35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,
-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467
s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422
s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.10770999999999997em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mclose">)</span></span></span></span></p>
<pre><code class="language-cpp">bool Prime4(int n)
{
    if(n==1) return 0;
    if(n==2||n==3) return 1;    //特判
    if(n%6!=1&amp;&amp;n%6!=5) return 0;
    for(register int i=5;i*i&lt;=n;i+=6)
        if(n%i==0||n%(i+2)==0) return false;
    return true;
}
</code></pre>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="brown"><mtext>弊端：只是一部分取巧，没有根本解决问题</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{brown}\text{弊端：只是一部分取巧，没有根本解决问题}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:brown;"><span class="mord cjk_fallback" style="color:brown;">弊端：只是一部分取巧，没有根本解决问题</span></span></span></span></span></p>
<h2 id="5-miller-rabin算法">5. miller rabin算法</h2>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mtext>作用：大概率地判断一个数是否为素数</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\text{作用：大概率地判断一个数是否为素数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:red;"><span class="mord cjk_fallback" style="color:red;">作用：大概率地判断一个数是否为素数</span></span></span></span></span></p>
<h3 id="基础理论">基础理论</h3>
<p>(1) 费马小定理<br>
(2) 二次探测的证明<br>
<img src="https://i.loli.net/2019/06/07/5cfa45237f5ad25087.jpg" alt="" loading="lazy"></p>
<h3 id="具体流程">具体流程</h3>
<p>(1) 直接判断偶数和0，1，2</p>
<p>(2)设要测试的数为x，再取一个较小的质数a，设s,t，满足<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mi>s</mi></msup><mtext> ⁣</mtext><mo>∗</mo><mtext> ⁣</mtext><mi>t</mi><mtext> ⁣</mtext><mo>=</mo><mtext> ⁣</mtext><mi>x</mi><mtext> ⁣</mtext><mo>−</mo><mtext> ⁣</mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">2^s\!*\!t\!=\!x\!-\!1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.664392em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mspace" style="margin-right:-0.16666666666666666em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<p>(3)计算出<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mi>t</mi></msup></mrow><annotation encoding="application/x-tex">a^t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7935559999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span></span></span></span></span></span></span></span>，然后不断地平方并且进行二次探测（进行s次）</p>
<p>(4)根据费马小定理，若最终<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>a</mi><mrow><mi>x</mi><mo>−</mo><mn>1</mn></mrow></msup><mi mathvariant="normal">≠</mi><mn>1</mn><mo>(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>x</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">a^{x-1}≠1(mod x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mclose">)</span></span></span></span>，则x为合数</p>
<p>(5)多次取不同a测试，提高正确性</p>
<h3 id="colorredtext时间复杂度"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="red"><mtext>时间复杂度</mtext></mstyle></mrow><annotation encoding="application/x-tex">\color{red}\text{时间复杂度}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord text" style="color:red;"><span class="mord cjk_fallback" style="color:red;">时间复杂度</span></span></span></span></span></h3>
<p><s>都是玄学</s></p>
<p>(1) 出错概率为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>4</mn><mrow><mo>−</mo><mi>s</mi></mrow></msup></mrow><annotation encoding="application/x-tex">4^{-s}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.771331em;vertical-align:0em;"></span><span class="mord"><span class="mord">4</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.771331em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathdefault mtight">s</span></span></span></span></span></span></span></span></span></span></span></span><br>
（<s>我也不知道为什么</s>）</p>
<p>(2) 可能是过程太复杂，没有找到关于它的时间复杂度的文章</p>
<h3 id="注意">注意</h3>
<p>(1) a越多正确率越高<br>
(2) 当a取小于30的所有素数时，int范围的数不会出错<br>
(3) 由于数据量原因，要使用快速乘和快速幂</p>
<h3 id="代码附测试">代码（附测试）</h3>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;algorithm&gt;
using namespace std;
int prime[10]={2,3,5,7,11,13,17,19,23,29};
typedef long long ll;
ll Quick_Multiply(ll a,ll b,ll c)   //快速积 
{
	ll ans=0,res=a;
	while(b)
	{
		if(b&amp;1)
		  ans=(ans+res)%c;
		res=(res+res)%c;
		b&gt;&gt;=1;
	}
	return ans;
}
ll Quick_Power(ll a,ll b,ll c)   //快速幂
{
	ll ans=1,res=a;
	while(b)
	{
		if(b&amp;1)
		  ans=Quick_Multiply(ans,res,c);
	    res=Quick_Multiply(res,res,c);
	    b&gt;&gt;=1;
	}
	return ans;
} 
bool Miller_Rabin(ll x)
{
	ll s=0,t=x-1,k;
	if(x==2) return 1;
	if(x&lt;2||!(x&amp;1)) return 0;  //排除偶数，0，1
	while(!(t&amp;1))              //将x分解为(2^s)*t的样子 
	{
		s++;
		t&gt;&gt;=1;
	} 
	for(int i=1;i&lt;10&amp;&amp;prime[i]&lt;x;i++)   //开始测试 
	{
		int a=prime[i];
		ll b=Quick_Power(a,t,x);        //计算a^t 
		for (int j=1;j&lt;=s;++j)          //s次平方 
		{
			k=Quick_Multiply(b,b,x);    //求b的平方 
			if(k==1&amp;&amp;b!=1&amp;&amp;b!=x-1)      //二次探求判断 
			  return 0;
			b=k;
		}
		if(b!=1) return 0;              //费马小定理判断 
	}
	return 1;                           //多次实验，是素数 
}
int main()
{
	ll x;
	scanf(&quot;%lld&quot;,&amp;x);
	if(Miller_Rabin(x)) printf(&quot;Yes&quot;);
	else printf(&quot;No&quot;);
	return 0;
}
</code></pre>
<p><strong>注：本算法难点在于两个定理和快速乘和快速幂</strong></p>
<p>参考资料（<s>复制粘贴</s>）</p>
<p><a href="https://blog.csdn.net/ltyqljhwcm/article/details/53045840">https://blog.csdn.net/ltyqljhwcm/article/details/53045840</a></p>
<p><a href="https://blog.csdn.net/forever_dreams/article/details/82314237">https://blog.csdn.net/forever_dreams/article/details/82314237</a></p>
<p><a href="https://www.luogu.org/problemnew/solution/P3383">https://www.luogu.org/problemnew/solution/P3383</a></p>
<h1 id="colorwhitecolorboxwhite关于其它方法随缘添加"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mstyle mathcolor="white"><menclose mathbackground="white"><mtext>关于其它方法，随缘添加</mtext></menclose></mstyle></mrow><annotation encoding="application/x-tex">\color{white}\colorbox{white}{关于其它方法，随缘添加}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2833299999999999em;vertical-align:-0.3em;"></span><span class="mord" style="color:white;"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9833299999999998em;"><span style="top:-2.98333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="stretchy colorbox" style="color:white;height:1.2833299999999999em;background-color:white;"></span></span><span style="top:-3.28333em;"><span class="pstrut" style="height:3.28333em;"></span><span class="mord boxpad" style="color:white;"><span class="mord cjk_fallback" style="color:white;">关</span><span class="mord cjk_fallback" style="color:white;">于</span><span class="mord cjk_fallback" style="color:white;">其</span><span class="mord cjk_fallback" style="color:white;">它</span><span class="mord cjk_fallback" style="color:white;">方</span><span class="mord cjk_fallback" style="color:white;">法</span><span class="mord cjk_fallback" style="color:white;">，</span><span class="mord cjk_fallback" style="color:white;">随</span><span class="mord cjk_fallback" style="color:white;">缘</span><span class="mord cjk_fallback" style="color:white;">添</span><span class="mord cjk_fallback" style="color:white;">加</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3em;"><span></span></span></span></span></span></span></span></span></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://BTli-Frozen.github.io/post/hello-gridea/</id>
        <link href="https://BTli-Frozen.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>